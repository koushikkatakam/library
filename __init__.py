from cipherdecipher_module import Encryption
from cipherdecipher_module import Decryption
from lc_programs import codes
from Patterns import for_loop
from Patterns import while_loop_patterns
from my_string import myString
import regex as re
import numpy as np
if __name__ == "__main__":
    # Create an object for the Encryption class
    encryption_obj = Encryption()
    plaintext = input("Enter Any String Of Words In Square Matrix:")
    p = 0
    for i in range(len(plaintext.split())-1,1,-1):
        if(len(plaintext.split())%i==0):
            p=i
            break

    key = ''
    for i in range(1,p+1):
        if(i%2!=0):
            key+=(str(-i)+' ')
        else:
            key+=(str(i)+' ')

    capitalized_sentence = encryption_obj.capitalize_first_letter(plaintext)


    # Encryption
    Route_Cipher_Encryption = encryption_obj.route_cipher_encrypt(capitalized_sentence, key,p,p)

    Rail_Fence_Cipher_Encryption = encryption_obj.rail_fence_cipher_encrypt(Route_Cipher_Encryption,p)

    Substitution_Cipher_Encryption = encryption_obj.substitution_cipher_encrypt(Rail_Fence_Cipher_Encryption)

    kk = {
        'a': (1, 1), 'b': (1, 2), 'c': (1, 3), 'd': (1, 4), 'e': (1, 5),
        'f': (2, 1), 'g': (2, 2), 'h': (2, 3), 'i': (2, 4), 'j': (2, 5),
        'k': (3, 1), 'l': (3, 2), 'm': (3, 3), 'n': (3, 4), 'o': (3, 5),
        'p': (4, 1), 'q': (4, 2), 'r': (4, 3), 's': (4, 4), 't': (4, 5),
        'u': (5, 1), 'v': (5, 2), 'w': (5, 3), 'x': (5, 4), 'y': (5, 5),
        'z': (6, 1),'A': (6, 2), 'B': (6, 3), 'C': (6, 4), 'D': (6, 5), 'E': (6, 6),
        'F': (6,7), 'G': (6, 8), 'H': (6, 9), 'I': (7,1), 'J': (7, 2),
        'K': (7,3), 'L': (7, 4), 'M': (7, 5), 'N': (7, 6), 'O': (7, 7),
        'P': (7,8), 'Q': (7, 9), 'R': (8, 1), 'S': (8, 2), 'T': (8, 3),
        'U': (8, 4), 'V': (8, 5), 'W': (8, 6), 'X': (8, 7), 'Y': (8, 8),
        'Z': (8, 9)  
    }
    My_Cipher_Encryption = encryption_obj.kk_cipher_encrypt(Substitution_Cipher_Encryption,kk)
    print("\n\n Message After Encryption:  {}".format(My_Cipher_Encryption))

    
    decrypted_obj = Decryption()
    My_Cipher_Decryption = encryption_obj.kk_cipher_decrypt(My_Cipher_Encryption,kk)

    Substitution_Cipher_Decryption = encryption_obj.substitutionDecrypt(My_Cipher_Decryption)

    message = decrypted_obj.prep_ciphertext(Substitution_Cipher_Decryption)
    row1, row2 = decrypted_obj.split_rails(message)
    r_f_d = decrypted_obj.railFenceDecrypt(row1, row2)
                        
    words = re.findall('[A-Z][^A-Z]*', r_f_d)
    word_list = list(words)
    split_list = [word_list[i:i+p] for i in range(0, len(word_list), p)]
    split_array = np.array(split_list)
    
    Rail_Cipher_Decryption = decrypted_obj.routeCipherDecrypt(split_array,p)
    print("\n\nMessage After Decrption:",Rail_Cipher_Decryption)


    # lc_programs
    lc = codes.Solution()
    
    lis = lc.lc_1([2,7,11,15],9)
    print("List of targeted values :", lis)
    p = lc.lc_9(1221)
    print("Is Palindrome :", p)
    roman = lc.lc_13("MCMXCIV")
    print("Roman numeral string :",roman)
    prefix = lc.lc_14(["flower","flow","flight"])
    print("The longest common prefix among the strings :", prefix)
    valid = lc.lc_20('(){}[]')
    print("Valid parenthesis :", valid)
    unique = lc.lc_26([1,2,3,2,1])
    print("Nuber of unique elements :",unique)
    elements = lc.lc_27([3,2,2,3],2)
    print("Remaining elements :",elements)
    index = lc.lc_28('sadbutsad','sad')
    print("Index :",index)
    targetlis = lc.lc_34([5,7,7,8,8,10],8)
    print("Target index list :", targetlis)
    target = lc.lc_35([1,3,5,6],5)
    print("Target index :",target)
    arrsum = lc.lc_53( [-2,1,-3,4,-1,2,1,-5,4])
    print("Contiguous array greatest sum :",arrsum)
    length = lc.lc_58(" fly to the moon ")
    print("Length of last word :", length)
    add_one = lc.lc_66([1,4,6])
    print("After adding one :",add_one)
    bin_sum = lc.lc_67('11','1')
    print("Binary sum:",bin_sum)
    sqroot = lc.lc_69(64)
    print("Square root :",sqroot)
    climb = lc.lc_70(6)
    print("Ways to Climb Stairs :",climb)
    value = lc.lc_74( [[1,3,5,7],[10,11,16,20],[23,30,34,60]],3)
    print("Target found ? ",value)
    merge = lc.lc_88([1,2,3,0,0,0],3,[2,5,6],3)
    print("The merged sorted array :",merge)
    profit = lc.lc_121([7,1,5,3,6,4])
    print("Maximum profit :",profit)
    num = lc.lc_136([1,2,3,2,1])
    print("Single number :", num)
    majority_element = lc.lc_169([2,2,1,1,1,2,2])
    print("Majority element in the list :",majority_element)
    excel = lc.lc_171("ZY")
    print("Excel column number :",excel)
    hamming_weight = lc.lc_191(11)
    print("No. of set bits :", hamming_weight)
    happy_number =lc.lc_202(19)
    print("Is happy number :", happy_number)
    isomorphic = lc.lc_205('egg','add')
    print("Is Isomorphic :",isomorphic)
    duplicates =lc.lc_217([1,2,3,1])
    print("Does list contains duplicates :",duplicates)
    anagram = lc.lc_242('anagram','nagaram')
    print("Is Anagram :", anagram)
    missing = lc.lc_268([2,3,1])
    print("Missing number :", missing)
    nums = [0,1,0,3,12]
    lc.lc_283(nums)
    print(nums)
    check = lc.lc_326(27)
    print("Number is power of 3 :", check)
    lis = lc.lc_338(2)
    print("Count of bits set to 1 :", lis)
    power = lc.lc_342(16)
    print("Is number Power of 4 :",power)
    s = ["h","e","l","l","o"]
    lc.lc_344(s)
    print("Reversed list :", s)
    s = lc.lc_345("hello")
    print("String after reversing the vowels :",s)
    add = lc.lc_371(3,5)
    print("Sum :",add)
    k_smallest = lc.lc_378([[1,5,9],[10,11,13],[12,13,15]],8)
    print("Kth smallest element :", k_smallest)
    ransom = lc.lc_383("aa","aab")
    print("Ransom :",ransom)
    index = lc.lc_387('leetcode')
    print("Index of first unique character :", index)
    s= lc.lc_389('abcd','abcde')
    print("Character added to second string is :",s)
    subsequent = lc.lc_392('abc','ahbgdc')
    print("s is subsequent to t :",subsequent)
    palindrome = lc.lc_409('abcccccdd')
    print("Length of longest palindrome :", palindrome)
    lis = lc.lc_412(20)
    print(lis)
    missing = lc.lc_448([4,3,2,7,8,2,3,1])
    print("Missing numbers :",missing)
    maximim = lc.lc_485([1,1,0,1,1,1])
    print("Maximim number of consecutive 1's :", maximim)
    fib = lc.lc_509(5)
    print("Fibonacci number :", fib)
    check = lc.lc_520('USA')
    print("Is the word's capitalization is correct :", check)
    num = lc.lc_540([1,1,2,3,3,4,4,8,8])
    print("Single element that appear only once :",num)
    reverse = lc.lc_557("Let's take LeetCode contest")
    print("Reversed string :", reverse)
    moves = lc.lc_657("UD")
    print("Robo returns to original position :", moves)
    lower_case = lc.lc_709('HELLO')
    print("Lower case :", lower_case)
    pivot = lc.lc_724( [1,7,3,6,5,6])
    print("Index of pivot element :", pivot)
    lis = lc.lc_728(1,22)
    print("Self dividing numbers found in given range :", lis)
    res = lc.lc_744( ["c","f","j"], 'a')
    print("The smallest letter greater than the target letter :", res)
    indices_list = lc.lc_760( A = [12,28,46,32,50], B = [50,12,32,46,28])
    print("indices of elements in list B corresponding to elements in list A :", indices_list)
    c = lc.lc_762(6, 4)
    print("The count of integers with a prime number of set bits :", c)
    n = lc.lc_771("aA","aAAbbbb")
    print("Number of characters in 'stones' that are also present in 'jewels' :", n)
    n = lc.lc_804(["gin", "zen", "gig", "msg"])
    print("The number of unique Morse code representations :", n)
    image = lc.lc_832([[1,1,0],[1,0,1],[0,0,0]])
    print("The flipped and inverted binary image :", image)
    arr = lc.lc_905([1,2,3,4])
    print("The sorted array with even integers appearing before odd integers :",arr)
    n = lc.lc_961([1,2,3,3])
    print("The integer that appears more than once in the list :", n)
    lis = lc.lc_977([-4,-1,0,3,10])
    print("The sorted list of squared numbers :",lis)
    common_chars = lc.lc_1002(["cool", "lock", "cook"])
    print("Common characters found in all words :", common_chars)
    win = lc.lc_1025(2)
    print("Alice can win :",win)
    n = lc.lc_1051([1,1,4,2,1,3])
    print("The number of students who need to change their positions :", n)
    res = lc.lc_1085( [34, 23, 1, 24, 75, 33, 54, 8])
    print("Is the sum of digits of the minimal element of A is odd :",res)
    ip_address = lc.lc_1108("1.1.1.1")
    print("The defanged IP address :",ip_address)
    s = lc.lc_1119("leetcodeisacommunityforcoders")
    print("The input string with vowels removed :", s)
    n = lc.lc_1160(["cat","bt","hat","tree"], "atach")
    print("The total length of words that can be formed using the characters from char :", n)
    check = lc.lc_1207([1, 2, 2, 1, 1, 3])
    print("Is the number of occurrences of each value is unique :",check)
    n = lc.lc_1221("RLRRLLRLRL")
    print("The number of balanced substrings in the input string :", n)
    check = lc.lc_2124("aaabbb")
    print("Is the string is in non-decreasing order :",check)
    line = lc.lc_1232([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])
    print("All the points in same line :",line)
    ans = lc.lc_1281(234)
    print("The difference between the product of the digits and the sum of the digits :",ans)
    n = lc.lc_1295([12,345,2,6,7896])
    print("The number of integers in the list that have an even number of digits :", n)
    arr = lc.lc_1299( [17,18,5,4,6,1])
    print("The modified array after replacing elements :",arr)
    arr = lc.lc_1304(5)
    print("The generated array :", arr)
    lis = lc.lc_1313([1,2,3,4])
    print("The decompressed list :",lis)
    indices = lc.lc_1337([[1,1,0,0,0],[1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]],k = 3)
    print("The indices of the k weakest rows :", indices)
    steps = lc.lc_1342(123)
    print("The number of steps required to reduce num to zero :", steps)
    n = lc.lc_1351( [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]])
    print("The number of negative integers in the grid :", n)
    lis = lc.lc_1365([8, 1, 2, 2, 3])
    print("The number of elements smaller than the corresponding element in the input list :", lis)
    s = lc.lc_1374(4)
    print("New string :", s)
    arr = lc.lc_1389([0,1,2,3,4],[0,1,2,2,1])
    print("The target array created using nums and index :",arr)
    candies = lc.lc_1431([2,3,5,1,3], 3)
    print("Child can have the greatest number of candies after adding extra candies :",candies)
    max_vowels = lc.lc_1456("abciiidef", 3)
    print("The maximum number of vowels in a substring :",max_vowels)
    check = lc.lc_1460([1,2,3,4],[2,4,1,3])
    print("Is the target array can be made equal to the given array :",check)
    max_product = lc.lc_1464([3,4,5,2])
    print("The maximum product of two integers in the list :",max_product)
    arr = lc.lc_1470([2, 5, 1, 3, 4, 7], 3)
    print("The shuffled array :",arr)
    prices = lc.lc_1475([8,4,6,2,3])
    print("The final prices after discounts :",prices)
    lis = lc.lc_1480([1,2,3,4,5])
    print("New list :",lis)
    pairs = lc.lc_1512([1,2,3,1,1])
    print("The count of identical pairs :", pairs)
    triplets = lc.lc_1534([3, 0, 1, 1, 9, 7], 7, 2, 3)
    print("The number of good triplets in the array :", triplets)
    s = lc.lc_1588([1,4,2,5,3])
    print("The sum of all subarrays with an odd length :", s)
    depth = lc.lc_1614("(1+(2*3)+((8)/4))+1")
    print("The maximum nesting depth :", depth)
    max_wealth = lc.lc_1672([[1,2,3],[3,2,1]])
    print("The maximum wealth among the customers :",max_wealth)
    s = lc.lc_1678("G()(al)")
    print("The interpreted string :", s)
    count = lc.lc_1684("ab", ["ad","bd","aaab","baa","badab"])
    print("The count of consistent strings :", count)
    check = lc.lc_1704('textbook')
    print("The halves of the string have an equal number of vowels :", check)
    rectangles = lc.lc_1725([[5,8],[3,9],[5,12],[16,5]])
    print("The number of rectangles with the maximum possible side length :", rectangles)
    items = lc.lc_1733( [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver")
    print("The number of items that match the specified rule :", items)
    max_balls = lc.lc_1742(11,104)
    print("The maximum number of balls in any box :", max_balls)
    unique_sum = lc.lc_1748([1,2,3,2])
    print("The sum of unique elements in the list :",unique_sum)
    sen = lc.lc_1816("Hello how are you Contestant",4)
    print("The truncated sentence :", sen)
    min_operations = lc.lc_1827([1,1,1])
    print("The minimum number of operations required :",min_operations)
    panagram = lc.lc_1832("thequickbrownfoxjumpsoverthelazydog")
    print("Is panagram :", panagram)
    s = lc.lc_1837(34,6)    
    print("The sum of the digits of n in base k :", s)
    string = lc.lc_1844("a1c1e1")
    print("The modified string with digits replaced by characters :", string)
    min_distance = lc.lc_1848([1,2,3,4,5],5,3)
    print("The minimum distance between the target integer and the start index :", min_distance)
    sen = lc.lc_1859( "is2 sentence4 This1 a3")
    print("Sorted sentence with words ordered based on the numbers :", sen)
    sub_strs = lc.lc_1876("aababcabc")
    print("The number of good substrings in the input string :",sub_strs)
    check = lc.lc_1880('acb','cba','cdb')
    print("Is the sum of the numerical values of firstWord and secondWord is equal to the numerical value of targetWord:",check)
    max_product = lc.lc_1913([4,2,5,9,7,4,8])
    print("The maximum difference between the products of any two pairs of numbers :", max_product)
    res = lc.lc_1920([0,2,1,5,3,4])
    print("The resulting array :",res)
    lis = lc.lc_1929([1,2,1])
    print("The concatenated list :",lis)
    n = lc.lc_1935("hello world", 'ad')
    print("The number of words that can be typed without using any broken letters :", n)
    valid = lc.lc_1941('1b1cbc')
    print("Is all characters in the string occur the same number of times :",valid)
    gcd = lc.lc_1979([2,5,6,9,10])
    print("The greatest common divisor (GCD) of the minimum and maximum elements in the list :",gcd)
    s = lc.lc_2000('abxdss','d')
    print("The word with the prefix reversed :",s)
    pairs = lc.lc_2006([1,2,2,1],1)
    print("The count of pairs having target difference :",pairs)
    val = lc.lc_2011(["--X","X++","X++"])
    print("The final value :", val)
    new_list = lc.lc_2032([1,1,3,2], [2,3], [3])
    print("The list of numbers that appear in at least two of the given lists :", new_list)
    moves = lc.lc_2037([2,2,6,6],[1,3,2,6])
    print("The minimum total number of moves required to seat all students :", moves)
    element = lc.lc_2053( ["d","b","c","b","c","a"], 2)
    print("The distinct element in the list :",element)
    index = lc.lc_2057([0,1,2])
    print("The smallest index :",index)
    indices_list = lc.lc_2089([1,2,5,2,3], 2)
    print("The list of indices where the target value occurs in the list :", indices_list)
    rods = lc.lc_2103("G3R3R7B7R5B1G8G4B3G6")
    print("The count of points where rings of three different colors intersect at the same rod :", rods)
    palindrome = lc.lc_2108( ["abc","car","ada","racecar","cool"])
    print("The first palindrome word in the list :",palindrome)
    max_count = lc.lc_2114(["alice and bob love leetcode","i think so too","this is great thanks very much"] )
    print("the sentence(s) with the maximum count of words :", max_count)
    check = lc.lc_2124('aaabbb')
    print("IS the string is in non-decreasing order :",check)
    lis = lc.lc_2138("abcdefghij",3,'x')
    print("A list of substrings after division :", lis)
    val = lc.lc_2154([5,3,6,1,12], 3)
    print("The final value of the 'original' variable after all operations :", val)
    n = lc.lc_2160(2932)
    print("The minimum sum of two two-digit numbers formed by rearranging the digits :",n)
    min_operations = lc.lc_2169(2,3)
    print("The number of operations required to make both numbers equal :", min_operations)
    pairs = lc.lc_2176([3,1,2,2,2,1,3], 2)
    print("The number of pairs satisfying the given conditions:", pairs)
    target_str = lc.lc_2243("11111222223", 3)
    print("The resulting string after digit sum calculation and repetition :",target_str)
    percent = lc.lc_2278('foobar','o')
    print("The percentage of occurrences of the specified letter in the given string :", percent)
    count_match = lc.lc_2283('1210')
    print("Is the count of each digit matches the digit itself :", count_match)
    n = lc.lc_2315("l|*e*et|c**o|*de|")
    print("Number of '*' characters excluding those between '|' pairs :", n)
    n = lc.lc_2357([1,5,0,3,5])
    print("The minimum number of operations required to make all elements of the list zero :",n)
    multiple = lc.lc_2413(5)
    print("The smallest even multiple of the given number :",multiple)
    lis = lc.lc_2418(["Mary", "John", "Emma"], [180, 165, 170])
    print("Sorted list of people's names based on their heights :",lis)
    n = lc.lc_2427(12,6)
    print("The number of common factors of the two integers :", n)
    n = lc.lc_2455([1,2,3,6,7,12])
    print("The average value of elements in the list that are divisible by 6 :",n)
    lis = lc.lc_2469(36.50)
    print("A list containing the temperature converted to Kelvin and Fahrenheit respectively :",lis)
    val = lc.lc_2496(["alic3","bob","3","4","00000"])
    print("The maximum value found in the list :", val)
    count = lc.lc_2520(121)
    print("The count of digits that divide num without any remainder :",count)
    n = lc.lc_2540([1,2,3],[2,4])
    print("The smallest common element :",n)
    alternating_sum = lc.lc_2544(234)
    print("The alternating sum of digits :",alternating_sum)
    abs_diff = lc.lc_2574([10,4,8,3])
    print("A list containing the absolute differences for each element in the input list :", abs_diff)
    t = lc.lc_2651(15, 5)
    print("The delayed arrival time (in hours) :",t)
    s = lc.lc_2652(10)
    print("The sum of multiples :",s)
    value = lc.lc_2769(4,1)
    print("The maximum achievable value of the number after 't' increments :", value)
    target = lc.lc_2798([0,1,2,3,4],2)
    print("The number of employees who met or exceeded the target number of working hours :", target)
    diff = lc.lc_2896(10,3)
    print("The difference between the sum of numbers not divisible by m and the sum of multiples of m from 0 to n :", diff)
    lis = lc.lc_2942(["leet","code"], "e")
    print("A list containing the indices of words in the input list that contain the given substring :", lis)


# for loop
    n = 5
    # Creating object for MyString class and passing a string
    patObj = for_loop.Patterns(n)
    patObj.square_grid_pat_1()
    print()
    patObj.square_grid_num_pat_2()
    print() 
    patObj.square_grid_num_pat_3() 
    print()
    patObj.square_grid_alpha_pat_4()
    print() 
    patObj.square_grid_alpha_pat_5() 
    print()
    patObj.square_grid_num_pat_6() 
    print()
    patObj.square_grid_num_pat_7() 
    print()
    patObj.square_grid_alpha_pat_8() 
    print()
    patObj.square_grid_alpha_pat_9() 
    print()
    patObj.increasing_triangular_pat_10() 
    print()
    patObj.increasing_triangular_num_pat_11() 
    print()
    patObj.increasing_triangular_num_pat_12() 
    print()
    patObj.increasing_triangular_alpha_pat_13() 
    print()
    patObj.increasing_triangular_alpha_pat_14() 
    print()
    patObj.decreasing_triangular_pat_15() 
    print()
    patObj.decreasing_triangular_num_pat_16() 
    print()
    patObj.decreasing_triangular_num_pat_17() 
    print()
    patObj.decreasing_triangular_alpha_pat_18() 
    print()
    patObj.decreasing_triangular_alpha_pat_19() 
    print()
    patObj.decreasing_triangular_num_pat_20() 
    print()
    patObj.decreasing_triangular_num_pat_21() 
    print()
    patObj.decreasing_triangular_alpha_pat_22() 
    print()
    patObj.decreasing_triangular_alpha_pat_23() 
    print()
    patObj.right_aligned_triangular_pat_24() 
    print()
    patObj.right_aligned_triangular_num_pat_25() 
    print()
    patObj.right_aligned_triangular_num_pat_26() 
    print()
    patObj.right_aligned_triangular_alpha_pat_27()
    print() 
    patObj.right_aligned_triangular_alpha_pat_28()
    print()
    patObj.right_aligned_decreasing_triangular_pat_29()
    print()
    patObj.right_aligned_decreasing_triangular_num_pat_30() 
    print()
    patObj.right_aligned_decreasing_triangular_num_pat_31() 
    print()
    patObj.right_aligned_decreasing_triangular_alpha_pat_32() 
    print() 
    patObj.right_aligned_decreasing_triangular_alpha_pat_33() 
    print()
    patObj.increasing_triangular_pat_34() 
    print()
    patObj.increasing_triangular_num_pat_35() 
    print()
    patObj.increasing_triangular_num_pat_36() 
    print()
    patObj.increasing_triangular_alpha_pat_37() 
    print()
    patObj.increasing_triangular_alpha_pat_38() 
    print()
    patObj.increasing_triangular_num_pat_39() 
    print()
    patObj.increasing_triangular_num_pat_40() 
    print()
    patObj.increasing_triangular_alpha_pat_41() 
    print()
    patObj.increasing_triangular_alpha_pat_42() 
    print()
    patObj.increasing_triangular_num_pat_43() 
    print()
    patObj.increasing_triangular_alpha_pat_44() 
    print()
    patObj.increasing_triangular_num_pat_45() 
    print()
    patObj.increasing_triangular_alpha_pat_46() 
    print()
    patObj.left_aligned_decreasing_triangular_pat_47() 
    print()
    patObj.left_aligned_decreasing_triangular_num_pat_48() 
    print()
    patObj.left_aligned_decreasing_triangular_num_pat_49() 
    print()
    patObj.inverted_pyramid_num_pat_50() 
    print()
    patObj.inverted_pyramid_alpha_pat_51() 
    print()
    patObj.inverted_pyramid_alpha_pat_52() 
    print()
    patObj.inverted_pyramid_alpha_pat_53() 
    print()
    patObj.alternating_triangular_pat_54() 
    print()
    patObj.alternating_triangular_num_pat_55() 
    print()
    patObj.alternating_triangular_num_pat_56() 
    print()
    patObj.alternating_triangular_alpha_pat_57() 
    print()
    patObj.alternating_triangular_alpha_pat_58() 
    print()
    patObj.left_pascal_triangle_pat_59() 
    print()
    patObj.left_pascal_triangle_num_pat_60() 
    print()
    patObj.left_pascal_triangle_num_pat_61() 
    print()
    patObj.left_pascal_triangle_alpha_pat_62() 
    print()
    patObj.left_pascal_triangle_alpha_pat_63() 
    print()
    patObj.increasing_triangular_pat_64() 
    print()
    patObj.increasing_triangular_num_pat_65()
    print()
    patObj.increasing_triangular_num_pat_66() 
    print()
    patObj.increasing_triangular_alpha_pat_67() 
    print()
    patObj.increasing_triangular_alpha_pat_68() 
    print()
    patObj.decreasing_triangular_pat_69() 
    print()
    patObj.decreasing_triangular_num_pat_70() 
    print()
    patObj.decreasing_triangular_num_pat_71() 
    print()
    patObj.decreasing_triangular_alpha_pat_72() 
    print()
    patObj.decreasing_triangular_alpha_pat_73() 
    print()
    patObj.decreasing_triangular_alpha_pat_74() 
    print()
    patObj.diamond_pat_75() 
    print()
    patObj.diamond_num_pat_76() 
    print()
    patObj.diamond_num_pat_77() 
    print()
    patObj.diamond_num_pat_78() 
    print()
    patObj.diamond_alpha_pat_79() 
    print()
    patObj.diamond_alpha_pat_80() 
    print()
    patObj.inverted_v_shaped_pat_81() 
    print()
    patObj.inverted_v_shaped_num_pat_82() 
    print()
    patObj.inverted_v_shaped_num_pat_83() 
    print()
    patObj.inverted_v_shaped_alpha_pat_84() 
    print()
    patObj.inverted_v_shaped_alpha_pat_85() 
    print()
    patObj.v_shaped_pat_86() 
    print()
    patObj.v_shaped_num_pat_87() 
    print()
    patObj.v_shaped_num_pat_88() 
    print()
    patObj.v_shaped_alpha_pat_89() 
    print()
    patObj.v_shaped_alpha_pat_90() 
    print()
    patObj.hallow_diamond_pat_91() 
    print()
    patObj.hallow_diamond_num_pat_92() 
    print()
    patObj.hallow_diamond_num_pat_93() 
    print()
    patObj.hallow_diamond_alpha_pat_94() 
    print()
    patObj.hallow_diamond_alpha_pat_95() 
    print()
    patObj.half_diamond_with_increasing_space_96()
    print() 
    patObj.decreasing_space_diamond_pattern_97()
    print()
    patObj.mirrored_diamond_98() 
    print()
    patObj.symmetrical_triangular_pat_99() 
    print()
    patObj.symmetrical_triangular_pat_100()

# while loop
    n = 5
    # Creating object for MyString class and passing a string
    patObj = while_loop_patterns.Patterns(n)
    patObj.square_grid_pat_1()
    print()
    patObj.square_grid_num_pat_2()
    print() 
    patObj.square_grid_num_pat_3() 
    print()
    patObj.square_grid_alpha_pat_4()
    print() 
    patObj.square_grid_alpha_pat_5() 
    print()
    patObj.square_grid_num_pat_6() 
    print()
    patObj.square_grid_num_pat_7() 
    print()
    patObj.square_grid_alpha_pat_8() 
    print()
    patObj.square_grid_alpha_pat_9() 
    print()
    patObj.increasing_triangular_pat_10() 
    print()
    patObj.increasing_triangular_num_pat_11() 
    print()
    patObj.increasing_triangular_num_pat_12() 
    print()
    patObj.increasing_triangular_alpha_pat_13() 
    print()
    patObj.increasing_triangular_alpha_pat_14() 
    print()
    patObj.decreasing_triangular_pat_15() 
    print()
    patObj.decreasing_triangular_num_pat_16() 
    print()
    patObj.decreasing_triangular_num_pat_17() 
    print()
    patObj.decreasing_triangular_alpha_pat_18() 
    print()
    patObj.decreasing_triangular_alpha_pat_19() 
    print()
    patObj.decreasing_triangular_num_pat_20() 
    print()
    patObj.decreasing_triangular_num_pat_21() 
    print()
    patObj.decreasing_triangular_alpha_pat_22() 
    print()
    patObj.decreasing_triangular_alpha_pat_23() 
    print()
    patObj.right_aligned_triangular_pat_24() 
    print()
    patObj.right_aligned_triangular_num_pat_25() 
    print()
    patObj.right_aligned_triangular_num_pat_26() 
    print()
    patObj.right_aligned_triangular_alpha_pat_27()
    print() 
    patObj.right_aligned_triangular_alpha_pat_28()
    print()
    patObj.right_aligned_decreasing_triangular_pat_29()
    print()
    patObj.right_aligned_decreasing_triangular_num_pat_30() 
    print()
    patObj.right_aligned_decreasing_triangular_num_pat_31() 
    print()
    patObj.right_aligned_decreasing_triangular_alpha_pat_32() 
    print() 
    patObj.right_aligned_decreasing_triangular_alpha_pat_33() 
    print()
    patObj.increasing_triangular_pat_34() 
    print()
    patObj.increasing_triangular_num_pat_35() 
    print()
    patObj.increasing_triangular_num_pat_36() 
    print()
    patObj.increasing_triangular_alpha_pat_37() 
    print()
    patObj.increasing_triangular_alpha_pat_38() 
    print()
    patObj.increasing_triangular_num_pat_39() 
    print()
    patObj.increasing_triangular_num_pat_40() 
    print()
    patObj.increasing_triangular_alpha_pat_41() 
    print()
    patObj.increasing_triangular_alpha_pat_42() 
    print()
    patObj.increasing_triangular_num_pat_43() 
    print()
    patObj.increasing_triangular_alpha_pat_44() 
    print()
    patObj.increasing_triangular_num_pat_45() 
    print()
    patObj.increasing_triangular_alpha_pat_46() 
    print()
    patObj.left_aligned_decreasing_triangular_pat_47() 
    print()
    patObj.left_aligned_decreasing_triangular_num_pat_48() 
    print()
    patObj.left_aligned_decreasing_triangular_num_pat_49() 
    print()
    patObj.inverted_pyramid_num_pat_50() 
    print()
    patObj.inverted_pyramid_alpha_pat_51() 
    print()
    patObj.inverted_pyramid_alpha_pat_52() 
    print()
    patObj.inverted_pyramid_alpha_pat_53() 
    print()
    patObj.alternating_triangular_pat_54() 
    print()
    patObj.alternating_triangular_num_pat_55() 
    print()
    patObj.alternating_triangular_num_pat_56() 
    print()
    patObj.alternating_triangular_alpha_pat_57() 
    print()
    patObj.alternating_triangular_alpha_pat_58() 
    print()
    patObj.left_pascal_triangle_pat_59() 
    print()
    patObj.left_pascal_triangle_num_pat_60() 
    print()
    patObj.left_pascal_triangle_num_pat_61() 
    print()
    patObj.left_pascal_triangle_alpha_pat_62() 
    print()
    patObj.left_pascal_triangle_alpha_pat_63() 
    print()
    patObj.increasing_triangular_pat_64() 
    print()
    patObj.increasing_triangular_num_pat_65()
    print()
    patObj.increasing_triangular_num_pat_66() 
    print()
    patObj.increasing_triangular_alpha_pat_67() 
    print()
    patObj.increasing_triangular_alpha_pat_68() 
    print()
    patObj.decreasing_triangular_pat_69() 
    print()
    patObj.decreasing_triangular_num_pat_70() 
    print()
    patObj.decreasing_triangular_num_pat_71() 
    print()
    patObj.decreasing_triangular_alpha_pat_72() 
    print()
    patObj.decreasing_triangular_alpha_pat_73() 
    print()
    patObj.decreasing_triangular_alpha_pat_74() 
    print()
    patObj.diamond_pat_75() 
    print()
    patObj.diamond_num_pat_76() 
    print()
    patObj.diamond_num_pat_77() 
    print()
    patObj.diamond_num_pat_78() 
    print()
    patObj.diamond_alpha_pat_79() 
    print()
    patObj.diamond_alpha_pat_80() 
    print()
    patObj.inverted_v_shaped_pat_81() 
    print()
    patObj.inverted_v_shaped_num_pat_82() 
    print()
    patObj.inverted_v_shaped_num_pat_83() 
    print()
    patObj.inverted_v_shaped_alpha_pat_84() 
    print()
    patObj.inverted_v_shaped_alpha_pat_85() 
    print()
    patObj.v_shaped_pat_86() 
    print()
    patObj.v_shaped_num_pat_87() 
    print()
    patObj.v_shaped_num_pat_88() 
    print()
    patObj.v_shaped_alpha_pat_89() 
    print()
    patObj.v_shaped_alpha_pat_90() 
    print()
    patObj.hallow_diamond_pat_91() 
    print()
    patObj.hallow_diamond_num_pat_92() 
    print()
    patObj.hallow_diamond_num_pat_93() 
    print()
    patObj.hallow_diamond_alpha_pat_94() 
    print()
    patObj.hallow_diamond_alpha_pat_95() 
    print()
    patObj.half_diamond_with_increasing_space_96()
    print() 
    patObj.decreasing_space_diamond_pattern_97()
    print()
    patObj.mirrored_diamond_98() 
    print()
    patObj.symmetrical_triangular_pat_99() 
    print()
    patObj.symmetrical_triangular_pat_100() 
    
    
    # strings
    s = "The quick brown fox jumps over the lazy dog."
    # Creating object for MyString class and passing a string
    strObj = myString.MyString(s)
    
    l = strObj.length(s)
    print("Length of string is :", l)
    c = strObj.count_('a')
    print("Count of 'a':", c)
    f = strObj.find_('l')
    print("Find of 'l' :", f)
    rf = strObj.rfind_('r')
    print("Right Find of 'r' :", rf)
    i = strObj.index_('i')
    print("Index of 'i' :", i)
    ri = strObj.rindex_('a')
    print("Right index of 'a' :",ri)
    
    lis = strObj.split_()
    print("Split :",lis)
    rlis = strObj.r_split()
    print("rsplit :", rlis)
    lines = strObj.split_lines()
    print("Split lines :", lines)
    res = strObj.join_(lis)
    print("Join :",res)
    
    u = strObj.upper_()
    print("Uppercase :", u)
    l = strObj.lower_()
    print("Lowercase :",l)
    sc = strObj.swap_case()
    print("Swapcase :",sc)
    t = strObj.title_()
    print("Title :",t)
    c = strObj.capitalize_()
    print("Capitalize :",c)
    cf = strObj.case_fold()
    print("Casefold :",cf)
    
    asci = strObj.is_ascii()
    print("Is ascii :",asci)
    alpha = strObj.is_alpha()
    print("Is alpha :",alpha)
    alnum = strObj.is_alnum()
    print("Alnum :",alnum)
    decimal = strObj.is_decimal()
    print("Is decimal :",decimal)
    digit = strObj.is_digit()
    print("Is digit :",digit)
    numeric = strObj.is_numeric()
    print("Is numeric :",numeric)
    identifier = strObj.is_identifier()
    print("Is identifier :",identifier)
    upper_ = strObj.is_upper()
    print("Is upper :",upper_)
    lower_ = strObj.is_lower()
    print("IS lower :",lower_)
    title_ = strObj.is_title()
    print("Is title :",title_)
    space = strObj.is_space()
    print("Is space :",space)
    printable = strObj.is_printable()
    print("Is printable :",printable)
    
    sw = strObj.starts_with('I')
    print("Starts with :",sw)
    ew = strObj.ends_with('e')
    print("Ends with :", ew)

    parts = strObj.partition_('i')
    print("Partition :", parts)
    rparts = strObj.r_partition(' ')
    print("R partition :",rparts)
    rep = strObj.replace_('o','e')
    print("Replace :",rep)
    
    c = strObj.center_(20)
    print("Center :",c)
    lj = strObj.l_just(20)
    print("Left just :",lj)
    rj = strObj.r_just(20)
    print("Right just :",rj)
    zf = strObj.z_fill(10)
    print("Zfill :",zf)
    
    prefix = strObj.remove_prefix('@')
    print("Remove prefix :", prefix)
    suffix = strObj.remove_suffix('*')
    print("Remove suffix",suffix)
    strp = strObj.strip_()
    print("Strip :",strp)
    lstrp = strObj.l_strip()
    print("Left strip :",lstrp)
    rstrp = strObj.r_strip()
    print("Right strip :",rstrp)
    
    dic = strObj.make_trans('abcd','wxyz')
    print("Make transe :",dic)
    trans = strObj.translate_(dic)
    print("Translate :",trans)
    
    str2=myString.MyString(s)
    print("Contains :",'a' in strObj)
    print("Concat :",strObj + str2)
    print("Multiply :",strObj * 3)
    print("Equal :",strObj == str2)